#!/usr/bin/env python

import os
import sys
import json
import stat
import model
import daemon
import signal
import argparse
import subprocess

fifo0, fifo1, mfile = scratch = '/tmp/fifo0', '/tmp/fifo1', '/tmp/lm'

def handler(signum, frame):
  map(os.remove, scratch)
  sys.exit(0)

def server():
  lm = model.Ngram(mfile)

  while True:
    with open(fifo0) as f:
      request = json.load(f)

    response = {}
    with open(fifo1, 'w') as f:
      response["stream"] = lm.stream(request["history"], request["length"])
      f.write(json.dumps(response) + '\n')

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Generate action-object stream.')

  parser.add_argument('training_data', type=argparse.FileType('r'))
  parser.add_argument('-o', '--order', type=int, default=3)
  parser.add_argument('-s', '--smoothing', default='ModKN')

  args = parser.parse_args()

  mitlm = ['estimate-ngram', '-t', args.training_data.name, '-wl', mfile]
  mitlm.extend(['-o', str(args.order), '-s', args.smoothing])

  try:
    subprocess.check_output(mitlm)
  except (subprocess.CalledProcessError, FileNotFoundError) as e:
    sys.stderr.write(repr(e))
    sys.exit(1)

  for pipe in [fifo0, fifo1]:
    if os.path.exists(pipe):
      if stat.S_ISFIFO(os.stat(pipe).st_mode) is not True:
        sys.stderr.write('ERROR: pipe(s) have invalid mode.')
        sys.exit(1)
    else:
      os.mkfifo(pipe)

  with daemon.DaemonContext(signal_map={signal.SIGTERM:handler}):
    server()
